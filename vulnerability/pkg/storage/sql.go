package storage

import (
	"context"
	"errors"
	"github.com/brittonhayes/citadel/vulnerability/pkg/models"
	validation "github.com/go-ozzo/ozzo-validation"
	"github.com/go-ozzo/ozzo-validation/is"
	"gorm.io/driver/mysql"
	"gorm.io/driver/postgres"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"log"
)

type Storage interface {
	ConnectWithContext() context.Context
	Migrate(db *gorm.DB, v models.Vulnerability) error
	GetByID(db *gorm.DB, id string) error
	Add(db *gorm.DB, v models.Vulnerability) error
	Delete(db *gorm.DB, id string) error
	UpdateFields(db *gorm.DB, v models.Vulnerability, fields ...string) error
}

type DatabaseConfig struct {
	Driver string
	DSN    string
	Table  string
}

var (
	ErrDatabaseContext = errors.New("failed to get db from context")
	ErrInvalidConfig   = errors.New("invalid database configuration")
)

func (c DatabaseConfig) Validate() error {
	return validation.ValidateStruct(&c,
		validation.Field(&c.Driver, validation.Required, validation.In("sqlite", "postgres", "mysql")),
		validation.Field(&c.DSN, validation.Required),
		validation.Field(&c.Table, validation.Required, is.Alphanumeric),
	)
}

func (c *DatabaseConfig) ConnectWithContext(ctx context.Context) context.Context {
	err := c.Validate()
	if err != nil {
		log.Print(ErrInvalidConfig)
	}

	switch c.Driver {
	case "sqlite":
		db, err := gorm.Open(sqlite.Open(c.DSN), &gorm.Config{})
		if err != nil {
			log.Print(err.Error())
			return nil
		}
		return context.WithValue(ctx, "DB", db)
	case "postgres":
		db, err := gorm.Open(postgres.Open(c.DSN), &gorm.Config{})
		if err != nil {
			log.Print(err.Error())
			return nil
		}
		return context.WithValue(ctx, "DB", db)
	case "mysql":
		db, err := gorm.Open(mysql.Open(c.DSN), &gorm.Config{})
		if err != nil {
			log.Print(err.Error())
			return nil
		}
		return context.WithValue(ctx, "DB", db)
	default:
		log.Print(ErrInvalidConfig)
		return nil
	}
}

func Migrate(ctx context.Context, v models.Vulnerability) error {
	db, ok := ctx.Value("DB").(*gorm.DB)
	if !ok {
		return ErrDatabaseContext
	}

	return db.AutoMigrate(&v)
}

func GetByID(ctx context.Context, id string, vulnerability *models.Vulnerability) error {
	db, _ := ctx.Value("DB").(*gorm.DB)
	return db.First(&vulnerability, "id = ?", id).Error
}

func Add(ctx context.Context, v *models.Vulnerability) error {
	db, ok := ctx.Value("DB").(*gorm.DB)
	if !ok {
		return ErrDatabaseContext
	}

	return db.Create(&v).Error
}

func Delete(ctx context.Context, id string) error {
	db, ok := ctx.Value("DB").(*gorm.DB)
	if !ok {
		return ErrDatabaseContext
	}

	return db.Delete(&models.Vulnerability{}, id).Error
}

func UpdateFields(ctx context.Context, v models.Vulnerability, fields ...string) error {
	db, ok := ctx.Value("DB").(*gorm.DB)
	if !ok {
		return ErrDatabaseContext
	}

	for _, field := range fields {
		return db.Model(v).Update(field, &v).Error
	}
	return nil
}
