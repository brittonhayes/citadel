package storage

import (
	"errors"
	"github.com/brittonhayes/citadel/vulnerability/pkg/models"
	"gorm.io/driver/mysql"
	"gorm.io/driver/postgres"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

type Storage interface {
	Connect() (*gorm.DB, error)
	Migrate(db *gorm.DB, v models.Vulnerability) error
	GetByID(db *gorm.DB, id string) error
	Add(db *gorm.DB, v models.Vulnerability) error
	Delete(db *gorm.DB, v models.Vulnerability) error
	UpdateFields(db *gorm.DB, v models.Vulnerability, fields ...string) error
}

var (
	ContextKeyDriver = ContextKey("driver")
	ContextKeyTable  = ContextKey("table")
	ContextKeyDSN    = ContextKey("dsn")
)

type ContextKey string

func (c ContextKey) String() string {
	return string(c)
}

type DatabaseConfig struct {
	Driver string
	DSN    string
	Table  string
}

func (c *DatabaseConfig) Connect() (*gorm.DB, error) {
	switch c.Driver {
	case "sqlite":
		return gorm.Open(sqlite.Open(c.DSN), &gorm.Config{})
	case "postgres":
		return gorm.Open(postgres.Open(c.DSN), &gorm.Config{})
	case "mysql":
		return gorm.Open(mysql.Open(c.DSN), &gorm.Config{})
	default:
		return nil, errors.New("no valid driver specified")
	}
}

func (c *DatabaseConfig) Migrate(v models.Vulnerability) error {
	db, err := c.Connect()
	if err != nil {
		return err
	}

	return db.Table(c.Table).AutoMigrate(&v)
}

func (c *DatabaseConfig) GetByID(id string, vulnerability *models.Vulnerability) error {
	db, err := c.Connect()
	if err != nil {
		return err
	}
	return db.Table(c.Table).First(&vulnerability, "id = ?", id).Error
}

func (c *DatabaseConfig) Add(v *models.Vulnerability) error {
	db, err := c.Connect()
	if err != nil {
		return err
	}
	return db.Table(c.Table).Create(&v).Error
}

func (c *DatabaseConfig) Delete(v models.Vulnerability) error {
	db, err := c.Connect()
	if err != nil {
		return err
	}
	return db.Delete(&v).Error
}

func (c *DatabaseConfig) UpdateFields(v models.Vulnerability, fields ...string) error {
	db, err := c.Connect()
	if err != nil {
		return err
	}

	for _, field := range fields {
		return db.Table(c.Table).Model(v).Update(field, &v).Error
	}
	return nil
}
