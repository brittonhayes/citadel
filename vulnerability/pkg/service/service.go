package service

import (
	"context"
	"errors"
	"fmt"

	"github.com/brittonhayes/citadel/vulnerability/pkg/models"
	"github.com/brittonhayes/citadel/vulnerability/pkg/storage"
)

// VulnerabilityService describes the service.
type VulnerabilityService interface {
	Get(ctx context.Context, id string) (v models.Vulnerability, err error)
	List(ctx context.Context) (v []models.Vulnerability, err error)
	Add(ctx context.Context, v models.Vulnerability) (err error)
	Update(ctx context.Context, v models.Vulnerability, fields ...string) (err error)
	Delete(ctx context.Context, id string) (err error)
}

var (
	ErrNotFound       = errors.New("could not find vulnerability")
	ErrCouldNotDelete = errors.New("could not delete vulnerability")
)

type basicVulnerabilityService struct{}

func (b *basicVulnerabilityService) Get(ctx context.Context, id string) (v models.Vulnerability, err error) {
	c := &storage.DatabaseConfig{
		Driver: ctx.Value(storage.ContextKeyDriver).(string),
		DSN:    ctx.Value(storage.ContextKeyDSN).(string),
		Table:  ctx.Value(storage.ContextKeyTable).(string),
	}

	err = c.GetByID(id, &v)
	if err != nil {
		return models.Vulnerability{}, err
	}

	return v, err
}
func (b *basicVulnerabilityService) List(_ context.Context) (v []models.Vulnerability, err error) {
	fmt.Println("called list")
	return v, err
}
func (b *basicVulnerabilityService) Add(ctx context.Context, v models.Vulnerability) (err error) {
	c := &storage.DatabaseConfig{
		Driver: ctx.Value(storage.ContextKeyDriver).(string),
		DSN:    ctx.Value(storage.ContextKeyDSN).(string),
		Table:  ctx.Value(storage.ContextKeyTable).(string),
	}

	err = c.Add(&v)
	if err != nil {
		return err
	}
	return err
}

func (b *basicVulnerabilityService) Update(ctx context.Context, v models.Vulnerability, fields ...string) (err error) {
	c := &storage.DatabaseConfig{
		Driver: ctx.Value(storage.ContextKeyDriver).(string),
		DSN:    ctx.Value(storage.ContextKeyDSN).(string),
		Table:  ctx.Value(storage.ContextKeyTable).(string),
	}

	err = c.UpdateFields(v, fields...)
	if err != nil {
		return err
	}

	return err
}

func (b *basicVulnerabilityService) Delete(ctx context.Context, id string) (err error) {
	// TODO implement the business logic of Delete
	return err
}

// NewBasicVulnerabilityService returns a naive, stateless implementation of VulnerabilityService.
func NewBasicVulnerabilityService() VulnerabilityService {
	return &basicVulnerabilityService{}
}

// New returns a VulnerabilityService with all of the expected middleware wired in.
func New(middleware []Middleware) VulnerabilityService {
	var svc VulnerabilityService = NewBasicVulnerabilityService()
	for _, m := range middleware {
		svc = m(svc)
	}
	return svc
}
