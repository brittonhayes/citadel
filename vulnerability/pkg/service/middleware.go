package service

import (
	"context"

	"github.com/brittonhayes/citadel/vulnerability/pkg/models"
	"github.com/brittonhayes/citadel/vulnerability/pkg/storage"
	"github.com/go-kit/kit/log"
)

// Middleware describes a service middleware.
type Middleware func(VulnerabilityService) VulnerabilityService

type databaseMiddleware struct {
	config storage.DatabaseConfig
	next   VulnerabilityService
}

type loggingMiddleware struct {
	logger log.Logger
	next   VulnerabilityService
}

// LoggingMiddleware takes a logger as a dependency
// and returns a VulnerabilityService Middleware.
func LoggingMiddleware(logger log.Logger) Middleware {
	return func(next VulnerabilityService) VulnerabilityService {
		return &loggingMiddleware{logger, next}
	}
}

// DatabaseMiddleware takes a storage config as a dependency
// and returns a VulnerabilityService Middleware.
func DatabaseMiddleware(config storage.DatabaseConfig) Middleware {
	return func(next VulnerabilityService) VulnerabilityService {
		return &databaseMiddleware{config, next}
	}
}

func (d databaseMiddleware) Get(ctx context.Context, id string) (v models.Vulnerability, err error) {
	ctx = d.config.ConnectWithContext(ctx)
	return d.next.Get(ctx, id)
}
func (d databaseMiddleware) List(ctx context.Context) (v []models.Vulnerability, err error) {
	ctx = d.config.ConnectWithContext(ctx)
	return d.next.List(ctx)
}
func (d databaseMiddleware) Add(ctx context.Context, v models.Vulnerability) (err error) {
	ctx = d.config.ConnectWithContext(ctx)
	return d.next.Add(ctx, v)
}
func (d databaseMiddleware) Update(ctx context.Context, v models.Vulnerability, fields ...string) (err error) {
	ctx = d.config.ConnectWithContext(ctx)
	return d.next.Update(ctx, v, fields...)
}
func (d databaseMiddleware) Delete(ctx context.Context, id string) (err error) {
	ctx = d.config.ConnectWithContext(ctx)
	return d.next.Delete(ctx, id)
}

func (l loggingMiddleware) Get(ctx context.Context, id string) (v models.Vulnerability, err error) {
	defer func() {
		l.logger.Log("method", "Get", "id", id, "v", v, "err", err)
	}()
	return l.next.Get(ctx, id)
}

func (l loggingMiddleware) List(ctx context.Context) (v []models.Vulnerability, err error) {
	defer func() {
		l.logger.Log("method", "List", "v", v, "err", err)
	}()
	return l.next.List(ctx)
}

func (l loggingMiddleware) Add(ctx context.Context, v models.Vulnerability) (err error) {
	defer func() {
		l.logger.Log("method", "Add", "v", v, "err", err)
	}()
	return l.next.Add(ctx, v)
}

func (l loggingMiddleware) Update(ctx context.Context, v models.Vulnerability, fields ...string) (err error) {
	defer func() {
		l.logger.Log("method", "Update", "v", v, "fields", fields, "err", err)
	}()
	return l.next.Update(ctx, v, fields...)
}

func (l loggingMiddleware) Delete(ctx context.Context, id string) (err error) {
	defer func() {
		l.logger.Log("method", "Delete", "id", id, "err", err)
	}()
	return l.next.Delete(ctx, id)
}
