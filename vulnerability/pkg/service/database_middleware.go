package service

import (
	"context"
	"github.com/brittonhayes/citadel/vulnerability/pkg/models"
	"github.com/brittonhayes/citadel/vulnerability/pkg/storage"
)

type databaseMiddleware struct {
	config storage.DatabaseConfig
	next   VulnerabilityService
}

// DatabaseMiddleware takes a storage config as a dependency
// and returns a VulnerabilityService Middleware.
func DatabaseMiddleware(config storage.DatabaseConfig) Middleware {
	return func(next VulnerabilityService) VulnerabilityService {
		return &databaseMiddleware{config, next}
	}
}

func (d databaseMiddleware) Get(ctx context.Context, id string) (v models.Vulnerability, err error) {
	ctx = d.config.ConnectWithContext(ctx)
	return d.next.Get(ctx, id)
}
func (d databaseMiddleware) List(ctx context.Context) (v []models.Vulnerability, err error) {
	ctx = d.config.ConnectWithContext(ctx)
	return d.next.List(ctx)
}
func (d databaseMiddleware) Add(ctx context.Context, v models.Vulnerability) (err error) {
	ctx = d.config.ConnectWithContext(ctx)
	return d.next.Add(ctx, v)
}
func (d databaseMiddleware) Update(ctx context.Context, v models.Vulnerability, fields ...string) (err error) {
	ctx = d.config.ConnectWithContext(ctx)
	return d.next.Update(ctx, v, fields...)
}
func (d databaseMiddleware) Delete(ctx context.Context, id string) (err error) {
	ctx = d.config.ConnectWithContext(ctx)
	return d.next.Delete(ctx, id)
}
