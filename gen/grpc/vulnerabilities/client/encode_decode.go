// Code generated by goa v3.2.6, DO NOT EDIT.
//
// vulnerabilities gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/brittonhayes/citadel/design

package client

import (
	"context"

	vulnerabilitiespb "github.com/brittonhayes/citadel/gen/grpc/vulnerabilities/pb"
	vulnerabilities "github.com/brittonhayes/citadel/gen/vulnerabilities"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildFindFunc builds the remote method to invoke for "vulnerabilities"
// service "find" endpoint.
func BuildFindFunc(grpccli vulnerabilitiespb.VulnerabilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Find(ctx, reqpb.(*vulnerabilitiespb.FindRequest), opts...)
		}
		return grpccli.Find(ctx, &vulnerabilitiespb.FindRequest{}, opts...)
	}
}

// EncodeFindRequest encodes requests sent to vulnerabilities find endpoint.
func EncodeFindRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*vulnerabilities.FindPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("vulnerabilities", "find", "*vulnerabilities.FindPayload", v)
	}
	return NewFindRequest(payload), nil
}

// DecodeFindResponse decodes responses from the vulnerabilities find endpoint.
func DecodeFindResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*vulnerabilitiespb.FindResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("vulnerabilities", "find", "*vulnerabilitiespb.FindResponse", v)
	}
	if err := ValidateFindResponse(message); err != nil {
		return nil, err
	}
	res := NewFindResult(message)
	return res, nil
}

// BuildListFunc builds the remote method to invoke for "vulnerabilities"
// service "list" endpoint.
func BuildListFunc(grpccli vulnerabilitiespb.VulnerabilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*vulnerabilitiespb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &vulnerabilitiespb.ListRequest{}, opts...)
	}
}

// EncodeListRequest encodes requests sent to vulnerabilities list endpoint.
func EncodeListRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*vulnerabilities.LimitPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("vulnerabilities", "list", "*vulnerabilities.LimitPayload", v)
	}
	return NewListRequest(payload), nil
}

// DecodeListResponse decodes responses from the vulnerabilities list endpoint.
func DecodeListResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*vulnerabilitiespb.ListResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("vulnerabilities", "list", "*vulnerabilitiespb.ListResponse", v)
	}
	if err := ValidateListResponse(message); err != nil {
		return nil, err
	}
	res := NewListResult(message)
	return res, nil
}
