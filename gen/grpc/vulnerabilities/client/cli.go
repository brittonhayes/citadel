// Code generated by goa v3.2.6, DO NOT EDIT.
//
// vulnerabilities gRPC client CLI support package
//
// Command:
// $ goa gen github.com/brittonhayes/citadel/design

package client

import (
	"encoding/json"
	"fmt"

	vulnerabilitiespb "github.com/brittonhayes/citadel/gen/grpc/vulnerabilities/pb"
	vulnerabilities "github.com/brittonhayes/citadel/gen/vulnerabilities"
)

// BuildFindPayload builds the payload for the vulnerabilities find endpoint
// from CLI flags.
func BuildFindPayload(vulnerabilitiesFindMessage string) (*vulnerabilities.FindPayload, error) {
	var err error
	var message vulnerabilitiespb.FindRequest
	{
		if vulnerabilitiesFindMessage != "" {
			err = json.Unmarshal([]byte(vulnerabilitiesFindMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 1874956703170258092\n   }'")
			}
		}
	}
	v := &vulnerabilities.FindPayload{
		ID: message.Id,
	}

	return v, nil
}

// BuildListPayload builds the payload for the vulnerabilities list endpoint
// from CLI flags.
func BuildListPayload(vulnerabilitiesListMessage string) (*vulnerabilities.LimitPayload, error) {
	var err error
	var message vulnerabilitiespb.ListRequest
	{
		if vulnerabilitiesListMessage != "" {
			err = json.Unmarshal([]byte(vulnerabilitiesListMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"limit\": 820\n   }'")
			}
		}
	}
	v := &vulnerabilities.LimitPayload{}
	if message.Limit != 0 {
		v.Limit = &message.Limit
	}

	return v, nil
}
