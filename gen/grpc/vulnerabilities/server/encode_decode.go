// Code generated by goa v3.2.6, DO NOT EDIT.
//
// vulnerabilities gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/brittonhayes/citadel/design

package server

import (
	"context"

	vulnerabilitiespb "github.com/brittonhayes/citadel/gen/grpc/vulnerabilities/pb"
	vulnerabilities "github.com/brittonhayes/citadel/gen/vulnerabilities"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeFindResponse encodes responses from the "vulnerabilities" service
// "find" endpoint.
func EncodeFindResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*vulnerabilities.Vulnerability)
	if !ok {
		return nil, goagrpc.ErrInvalidType("vulnerabilities", "find", "*vulnerabilities.Vulnerability", v)
	}
	resp := NewFindResponse(result)
	return resp, nil
}

// DecodeFindRequest decodes requests sent to "vulnerabilities" service "find"
// endpoint.
func DecodeFindRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *vulnerabilitiespb.FindRequest
		ok      bool
	)
	{
		if message, ok = v.(*vulnerabilitiespb.FindRequest); !ok {
			return nil, goagrpc.ErrInvalidType("vulnerabilities", "find", "*vulnerabilitiespb.FindRequest", v)
		}
	}
	var payload *vulnerabilities.FindPayload
	{
		payload = NewFindPayload(message)
	}
	return payload, nil
}

// EncodeListResponse encodes responses from the "vulnerabilities" service
// "list" endpoint.
func EncodeListResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.([]*vulnerabilities.Vulnerability)
	if !ok {
		return nil, goagrpc.ErrInvalidType("vulnerabilities", "list", "[]*vulnerabilities.Vulnerability", v)
	}
	resp := NewListResponse(result)
	return resp, nil
}

// DecodeListRequest decodes requests sent to "vulnerabilities" service "list"
// endpoint.
func DecodeListRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *vulnerabilitiespb.ListRequest
		ok      bool
	)
	{
		if message, ok = v.(*vulnerabilitiespb.ListRequest); !ok {
			return nil, goagrpc.ErrInvalidType("vulnerabilities", "list", "*vulnerabilitiespb.ListRequest", v)
		}
		if err := ValidateListRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *vulnerabilities.LimitPayload
	{
		payload = NewListPayload(message)
	}
	return payload, nil
}
