// Code generated by goa v3.2.6, DO NOT EDIT.
//
// citadel gRPC client CLI support package
//
// Command:
// $ goa gen github.com/brittonhayes/citadel/design

package cli

import (
	"flag"
	"fmt"
	"os"

	vulnerabilitiesc "github.com/brittonhayes/citadel/gen/grpc/vulnerabilities/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `vulnerabilities (find|list)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` vulnerabilities find --message '{
      "id": 1874956703170258092
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		vulnerabilitiesFlags = flag.NewFlagSet("vulnerabilities", flag.ContinueOnError)

		vulnerabilitiesFindFlags       = flag.NewFlagSet("find", flag.ExitOnError)
		vulnerabilitiesFindMessageFlag = vulnerabilitiesFindFlags.String("message", "", "")

		vulnerabilitiesListFlags       = flag.NewFlagSet("list", flag.ExitOnError)
		vulnerabilitiesListMessageFlag = vulnerabilitiesListFlags.String("message", "", "")
	)
	vulnerabilitiesFlags.Usage = vulnerabilitiesUsage
	vulnerabilitiesFindFlags.Usage = vulnerabilitiesFindUsage
	vulnerabilitiesListFlags.Usage = vulnerabilitiesListUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "vulnerabilities":
			svcf = vulnerabilitiesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "vulnerabilities":
			switch epn {
			case "find":
				epf = vulnerabilitiesFindFlags

			case "list":
				epf = vulnerabilitiesListFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "vulnerabilities":
			c := vulnerabilitiesc.NewClient(cc, opts...)
			switch epn {
			case "find":
				endpoint = c.Find()
				data, err = vulnerabilitiesc.BuildFindPayload(*vulnerabilitiesFindMessageFlag)
			case "list":
				endpoint = c.List()
				data, err = vulnerabilitiesc.BuildListPayload(*vulnerabilitiesListMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// vulnerabilitiesUsage displays the usage of the vulnerabilities command and
// its subcommands.
func vulnerabilitiesUsage() {
	fmt.Fprintf(os.Stderr, `The vulnerability service handles the creation and querying of security vulnerabilities.
Usage:
    %s [globalflags] vulnerabilities COMMAND [flags]

COMMAND:
    find: Find implements find.
    list: List all of the vulnerabilities

Additional help:
    %s vulnerabilities COMMAND --help
`, os.Args[0], os.Args[0])
}
func vulnerabilitiesFindUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] vulnerabilities find -message JSON

Find implements find.
    -message JSON: 

Example:
    `+os.Args[0]+` vulnerabilities find --message '{
      "id": 1874956703170258092
   }'
`, os.Args[0])
}

func vulnerabilitiesListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] vulnerabilities list -message JSON

List all of the vulnerabilities
    -message JSON: 

Example:
    `+os.Args[0]+` vulnerabilities list --message '{
      "limit": 820
   }'
`, os.Args[0])
}
