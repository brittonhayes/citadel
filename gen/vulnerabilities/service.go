// Code generated by goa v3.2.6, DO NOT EDIT.
//
// vulnerabilities service
//
// Command:
// $ goa gen citadel/design

package vulnerabilities

import (
	"context"
)

// The vulnerability service handles the creation and querying of security
// vulnerabilities.
type Service interface {
	// Find implements find.
	Find(context.Context, *FindPayload) (res *Vulnerability, err error)
	// List all of the vulnerabilities
	List(context.Context, *LimitPayload) (res []*Vulnerability, err error)
	// Submit implements submit.
	Submit(context.Context, *SubmitPayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "vulnerabilities"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"find", "list", "submit"}

// FindPayload is the payload type of the vulnerabilities service find method.
type FindPayload struct {
	// Unique ID of the vulnerability
	ID uint64
}

// Vulnerability is the result type of the vulnerabilities service find method.
type Vulnerability struct {
	// Unique ID of the vulnerability
	ID uint64
	// Title of the vulnerability
	Title *string
	// Description of the vulnerability
	Description *string
	// If the vulnerability is exploitable
	Exploitable *bool
	// Severity score of the vulnerability
	CvssScore *float32
	// If the vulnerability is patchable
	IsPatchable *bool
	// If the vulnerability is upgradeable
	IsUpgradeable *bool
}

// LimitPayload is the payload type of the vulnerabilities service list method.
type LimitPayload struct {
	// Limit the number of results
	Limit *int32
}

// SubmitPayload is the payload type of the vulnerabilities service submit
// method.
type SubmitPayload struct {
	// Title of the vulnerability
	Title *string
	// Description of the vulnerability
	Description *string
	// If the vulnerability is exploitable
	Exploitable *bool
	// Severity score of the vulnerability
	CvssScore *float32
	// If the vulnerability is patchable
	IsPatchable *bool
	// If the vulnerability is upgradeable
	IsUpgradeable *bool
}

// No vulnerability matched given criteria
type NoMatch string

// Error returns an error description.
func (e NoMatch) Error() string {
	return "No vulnerability matched given criteria"
}

// ErrorName returns "no_match".
func (e NoMatch) ErrorName() string {
	return "no_match"
}
