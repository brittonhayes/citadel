// Code generated by goa v3.2.6, DO NOT EDIT.
//
// vulnerabilities endpoints
//
// Command:
// $ goa gen citadel/design

package vulnerabilities

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Endpoints wraps the "vulnerabilities" service endpoints.
type Endpoints struct {
	Find   endpoint.Endpoint
	List   endpoint.Endpoint
	Submit endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "vulnerabilities" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Find:   NewFindEndpoint(s),
		List:   NewListEndpoint(s),
		Submit: NewSubmitEndpoint(s),
	}
}

// Use applies the given middleware to all the "vulnerabilities" service
// endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.Find = m(e.Find)
	e.List = m(e.List)
	e.Submit = m(e.Submit)
}

// NewFindEndpoint returns an endpoint function that calls the method "find" of
// service "vulnerabilities".
func NewFindEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*FindPayload)
		return s.Find(ctx, p)
	}
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "vulnerabilities".
func NewListEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*LimitPayload)
		return s.List(ctx, p)
	}
}

// NewSubmitEndpoint returns an endpoint function that calls the method
// "submit" of service "vulnerabilities".
func NewSubmitEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SubmitPayload)
		return nil, s.Submit(ctx, p)
	}
}
