// Code generated by goa v3.2.6, DO NOT EDIT.
//
// incidents HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/brittonhayes/citadel/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	incidents "github.com/brittonhayes/citadel/gen/incidents"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildFindRequest instantiates a HTTP request object with method and path set
// to call the "incidents" service "find" endpoint
func (c *Client) BuildFindRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*incidents.FindPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("incidents", "find", "*incidents.FindPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FindIncidentsPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("incidents", "find", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeFindResponse returns a decoder for responses returned by the incidents
// find endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeFindResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FindResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("incidents", "find", err)
			}
			err = ValidateFindResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("incidents", "find", err)
			}
			res := NewFindIncidentOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("incidents", "find", resp.StatusCode, string(body))
		}
	}
}

// BuildListAllRequest instantiates a HTTP request object with method and path
// set to call the "incidents" service "list all" endpoint
func (c *Client) BuildListAllRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListAllIncidentsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("incidents", "list all", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListAllRequest returns an encoder for requests sent to the incidents
// list all server.
func EncodeListAllRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*incidents.LimitPayload)
		if !ok {
			return goahttp.ErrInvalidType("incidents", "list all", "*incidents.LimitPayload", v)
		}
		values := req.URL.Query()
		if p.Limit != nil {
			values.Add("limit", fmt.Sprintf("%v", *p.Limit))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListAllResponse returns a decoder for responses returned by the
// incidents list all endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListAllResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListAllResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("incidents", "list all", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateIncidentResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("incidents", "list all", err)
			}
			res := NewListAllIncidentOK(body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("incidents", "list all", resp.StatusCode, string(body))
		}
	}
}

// unmarshalIncidentResponseToIncidentsIncident builds a value of type
// *incidents.Incident from a value of type *IncidentResponse.
func unmarshalIncidentResponseToIncidentsIncident(v *IncidentResponse) *incidents.Incident {
	res := &incidents.Incident{
		ID:               v.ID,
		Date:             v.Date,
		DateClosed:       v.DateClosed,
		Permissions:      v.Permissions,
		Severity:         v.Severity,
		Title:            v.Title,
		Summary:          v.Summary,
		Scope:            v.Scope,
		ResponsibleParty: v.ResponsibleParty,
		RootCause:        v.RootCause,
		SlackChannel:     v.SlackChannel,
		CreatedAt:        v.CreatedAt,
		UpdatedAt:        v.UpdatedAt,
	}
	if v.AffectedCustomers != nil {
		res.AffectedCustomers = make([]string, len(v.AffectedCustomers))
		for i, val := range v.AffectedCustomers {
			res.AffectedCustomers[i] = val
		}
	}

	return res
}
