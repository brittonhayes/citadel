// Code generated by goa v3.2.6, DO NOT EDIT.
//
// incidents HTTP client CLI support package
//
// Command:
// $ goa gen citadel/design

package client

import (
	incidents "citadel/gen/incidents"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildFindPayload builds the payload for the incidents find endpoint from CLI
// flags.
func BuildFindPayload(incidentsFindID string) (*incidents.FindPayload, error) {
	var err error
	var id uint64
	{
		id, err = strconv.ParseUint(incidentsFindID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT64")
		}
	}
	v := &incidents.FindPayload{}
	v.ID = id

	return v, nil
}

// BuildListAllPayload builds the payload for the incidents list all endpoint
// from CLI flags.
func BuildListAllPayload(incidentsListAllLimit string) (*incidents.LimitPayload, error) {
	var err error
	var limit *int32
	{
		if incidentsListAllLimit != "" {
			var v int64
			v, err = strconv.ParseInt(incidentsListAllLimit, 10, 32)
			val := int32(v)
			limit = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT32")
			}
			if limit != nil {
				if *limit < 0 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("limit", *limit, 0, true))
				}
			}
			if limit != nil {
				if *limit > 1000 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("limit", *limit, 1000, false))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &incidents.LimitPayload{}
	v.Limit = limit

	return v, nil
}
