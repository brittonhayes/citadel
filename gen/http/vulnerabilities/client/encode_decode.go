// Code generated by goa v3.2.5, DO NOT EDIT.
//
// vulnerabilities HTTP client encoders and decoders
//
// Command:
// $ goa gen citadel/design

package client

import (
	"bytes"
	vulnerabilities "citadel/gen/vulnerabilities"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildFindRequest instantiates a HTTP request object with method and path set
// to call the "vulnerabilities" service "find" endpoint
func (c *Client) BuildFindRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*vulnerabilities.FindPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("vulnerabilities", "find", "*vulnerabilities.FindPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FindVulnerabilitiesPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("vulnerabilities", "find", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeFindResponse returns a decoder for responses returned by the
// vulnerabilities find endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeFindResponse may return the following errors:
//	- "no_match" (type vulnerabilities.NoMatch): http.StatusNotFound
//	- error: internal error
func DecodeFindResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FindResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("vulnerabilities", "find", err)
			}
			err = ValidateFindResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("vulnerabilities", "find", err)
			}
			res := NewFindVulnerabilityOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body FindNoMatchResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("vulnerabilities", "find", err)
			}
			return nil, NewFindNoMatch(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("vulnerabilities", "find", resp.StatusCode, string(body))
		}
	}
}

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "vulnerabilities" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListVulnerabilitiesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("vulnerabilities", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the
// vulnerabilities list server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*vulnerabilities.LimitPayload)
		if !ok {
			return goahttp.ErrInvalidType("vulnerabilities", "list", "*vulnerabilities.LimitPayload", v)
		}
		values := req.URL.Query()
		if p.Limit != nil {
			values.Add("limit", fmt.Sprintf("%v", *p.Limit))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the
// vulnerabilities list endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("vulnerabilities", "list", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateVulnerabilityResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("vulnerabilities", "list", err)
			}
			res := NewListVulnerabilityOK(body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("vulnerabilities", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildSubmitRequest instantiates a HTTP request object with method and path
// set to call the "vulnerabilities" service "submit" endpoint
func (c *Client) BuildSubmitRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SubmitVulnerabilitiesPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("vulnerabilities", "submit", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSubmitRequest returns an encoder for requests sent to the
// vulnerabilities submit server.
func EncodeSubmitRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*vulnerabilities.SubmitPayload)
		if !ok {
			return goahttp.ErrInvalidType("vulnerabilities", "submit", "*vulnerabilities.SubmitPayload", v)
		}
		body := NewSubmitRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("vulnerabilities", "submit", err)
		}
		return nil
	}
}

// DecodeSubmitResponse returns a decoder for responses returned by the
// vulnerabilities submit endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeSubmitResponse may return the following errors:
//	- "no_match" (type vulnerabilities.NoMatch): http.StatusNotFound
//	- error: internal error
func DecodeSubmitResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		case http.StatusNotFound:
			var (
				body SubmitNoMatchResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("vulnerabilities", "submit", err)
			}
			return nil, NewSubmitNoMatch(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("vulnerabilities", "submit", resp.StatusCode, string(body))
		}
	}
}

// unmarshalVulnerabilityResponseToVulnerabilitiesVulnerability builds a value
// of type *vulnerabilities.Vulnerability from a value of type
// *VulnerabilityResponse.
func unmarshalVulnerabilityResponseToVulnerabilitiesVulnerability(v *VulnerabilityResponse) *vulnerabilities.Vulnerability {
	res := &vulnerabilities.Vulnerability{
		ID:            *v.ID,
		Title:         v.Title,
		Description:   v.Description,
		Exploitable:   v.Exploitable,
		CvssScore:     v.CvssScore,
		IsPatchable:   v.IsPatchable,
		IsUpgradeable: v.IsUpgradeable,
	}

	return res
}
