// Code generated by goa v3.2.5, DO NOT EDIT.
//
// vulnerabilities HTTP server encoders and decoders
//
// Command:
// $ goa gen citadel/design

package server

import (
	vulnerabilities "citadel/gen/vulnerabilities"
	"context"
	"io"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeFindResponse returns an encoder for responses returned by the
// vulnerabilities find endpoint.
func EncodeFindResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*vulnerabilities.Vulnerability)
		enc := encoder(ctx, w)
		body := NewFindResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeFindRequest returns a decoder for requests sent to the vulnerabilities
// find endpoint.
func DecodeFindRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id  uint64
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = v
		}
		if err != nil {
			return nil, err
		}
		payload := NewFindPayload(id)

		return payload, nil
	}
}

// EncodeFindError returns an encoder for errors returned by the find
// vulnerabilities endpoint.
func EncodeFindError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "no_match":
			res := v.(vulnerabilities.NoMatch)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFindNoMatchResponseBody(res)
			}
			w.Header().Set("goa-error", "no_match")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListResponse returns an encoder for responses returned by the
// vulnerabilities list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.([]*vulnerabilities.Vulnerability)
		enc := encoder(ctx, w)
		body := NewListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListRequest returns a decoder for requests sent to the vulnerabilities
// list endpoint.
func DecodeListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			limit *int32
			err   error
		)
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw != "" {
				v, err2 := strconv.ParseInt(limitRaw, 10, 32)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				pv := int32(v)
				limit = &pv
			}
		}
		if limit != nil {
			if *limit < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", *limit, 0, true))
			}
		}
		if limit != nil {
			if *limit > 1000 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", *limit, 1000, false))
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewListLimitPayload(limit)

		return payload, nil
	}
}

// EncodeSubmitResponse returns an encoder for responses returned by the
// vulnerabilities submit endpoint.
func EncodeSubmitResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusCreated)
		return nil
	}
}

// DecodeSubmitRequest returns a decoder for requests sent to the
// vulnerabilities submit endpoint.
func DecodeSubmitRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SubmitRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewSubmitPayload(&body)

		return payload, nil
	}
}

// EncodeSubmitError returns an encoder for errors returned by the submit
// vulnerabilities endpoint.
func EncodeSubmitError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "no_match":
			res := v.(vulnerabilities.NoMatch)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSubmitNoMatchResponseBody(res)
			}
			w.Header().Set("goa-error", "no_match")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalVulnerabilitiesVulnerabilityToVulnerabilityResponse builds a value of
// type *VulnerabilityResponse from a value of type
// *vulnerabilities.Vulnerability.
func marshalVulnerabilitiesVulnerabilityToVulnerabilityResponse(v *vulnerabilities.Vulnerability) *VulnerabilityResponse {
	res := &VulnerabilityResponse{
		ID:            v.ID,
		Title:         v.Title,
		Description:   v.Description,
		Exploitable:   v.Exploitable,
		CvssScore:     v.CvssScore,
		IsPatchable:   v.IsPatchable,
		IsUpgradeable: v.IsUpgradeable,
	}

	return res
}
