// Code generated by goa v3.2.6, DO NOT EDIT.
//
// citadel HTTP client CLI support package
//
// Command:
// $ goa gen github.com/brittonhayes/citadel/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	incidentsc "github.com/brittonhayes/citadel/gen/http/incidents/client"
	vulnerabilitiesc "github.com/brittonhayes/citadel/gen/http/vulnerabilities/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `incidents (find|list- all)
vulnerabilities (find|list|submit)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` incidents find --id 1753544852534599943` + "\n" +
		os.Args[0] + ` vulnerabilities find --id 3335206930423025204` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		incidentsFlags = flag.NewFlagSet("incidents", flag.ContinueOnError)

		incidentsFindFlags  = flag.NewFlagSet("find", flag.ExitOnError)
		incidentsFindIDFlag = incidentsFindFlags.String("id", "REQUIRED", "Unique ID of the incident")

		incidentsListAllFlags     = flag.NewFlagSet("list- all", flag.ExitOnError)
		incidentsListAllLimitFlag = incidentsListAllFlags.String("limit", "", "")

		vulnerabilitiesFlags = flag.NewFlagSet("vulnerabilities", flag.ContinueOnError)

		vulnerabilitiesFindFlags  = flag.NewFlagSet("find", flag.ExitOnError)
		vulnerabilitiesFindIDFlag = vulnerabilitiesFindFlags.String("id", "REQUIRED", "Unique ID of the vulnerability")

		vulnerabilitiesListFlags     = flag.NewFlagSet("list", flag.ExitOnError)
		vulnerabilitiesListLimitFlag = vulnerabilitiesListFlags.String("limit", "", "")

		vulnerabilitiesSubmitFlags    = flag.NewFlagSet("submit", flag.ExitOnError)
		vulnerabilitiesSubmitBodyFlag = vulnerabilitiesSubmitFlags.String("body", "REQUIRED", "")
	)
	incidentsFlags.Usage = incidentsUsage
	incidentsFindFlags.Usage = incidentsFindUsage
	incidentsListAllFlags.Usage = incidentsListAllUsage

	vulnerabilitiesFlags.Usage = vulnerabilitiesUsage
	vulnerabilitiesFindFlags.Usage = vulnerabilitiesFindUsage
	vulnerabilitiesListFlags.Usage = vulnerabilitiesListUsage
	vulnerabilitiesSubmitFlags.Usage = vulnerabilitiesSubmitUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "incidents":
			svcf = incidentsFlags
		case "vulnerabilities":
			svcf = vulnerabilitiesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "incidents":
			switch epn {
			case "find":
				epf = incidentsFindFlags

			case "list- all":
				epf = incidentsListAllFlags

			}

		case "vulnerabilities":
			switch epn {
			case "find":
				epf = vulnerabilitiesFindFlags

			case "list":
				epf = vulnerabilitiesListFlags

			case "submit":
				epf = vulnerabilitiesSubmitFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "incidents":
			c := incidentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "find":
				endpoint = c.Find()
				data, err = incidentsc.BuildFindPayload(*incidentsFindIDFlag)
			case "list- all":
				endpoint = c.ListAll()
				data, err = incidentsc.BuildListAllPayload(*incidentsListAllLimitFlag)
			}
		case "vulnerabilities":
			c := vulnerabilitiesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "find":
				endpoint = c.Find()
				data, err = vulnerabilitiesc.BuildFindPayload(*vulnerabilitiesFindIDFlag)
			case "list":
				endpoint = c.List()
				data, err = vulnerabilitiesc.BuildListPayload(*vulnerabilitiesListLimitFlag)
			case "submit":
				endpoint = c.Submit()
				data, err = vulnerabilitiesc.BuildSubmitPayload(*vulnerabilitiesSubmitBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// incidentsUsage displays the usage of the incidents command and its
// subcommands.
func incidentsUsage() {
	fmt.Fprintf(os.Stderr, `The incident service handles the creation and querying of security incidents
Usage:
    %s [globalflags] incidents COMMAND [flags]

COMMAND:
    find: Find implements find.
    list- all: ListAll implements list all.

Additional help:
    %s incidents COMMAND --help
`, os.Args[0], os.Args[0])
}
func incidentsFindUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incidents find -id UINT64

Find implements find.
    -id UINT64: Unique ID of the incident

Example:
    `+os.Args[0]+` incidents find --id 1753544852534599943
`, os.Args[0])
}

func incidentsListAllUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incidents list- all -limit INT32

ListAll implements list all.
    -limit INT32: 

Example:
    `+os.Args[0]+` incidents list- all --limit 829
`, os.Args[0])
}

// vulnerabilitiesUsage displays the usage of the vulnerabilities command and
// its subcommands.
func vulnerabilitiesUsage() {
	fmt.Fprintf(os.Stderr, `The vulnerability service handles the creation and querying of security vulnerabilities.
Usage:
    %s [globalflags] vulnerabilities COMMAND [flags]

COMMAND:
    find: Find implements find.
    list: List all of the vulnerabilities
    submit: Submit implements submit.

Additional help:
    %s vulnerabilities COMMAND --help
`, os.Args[0], os.Args[0])
}
func vulnerabilitiesFindUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] vulnerabilities find -id UINT64

Find implements find.
    -id UINT64: Unique ID of the vulnerability

Example:
    `+os.Args[0]+` vulnerabilities find --id 3335206930423025204
`, os.Args[0])
}

func vulnerabilitiesListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] vulnerabilities list -limit INT32

List all of the vulnerabilities
    -limit INT32: 

Example:
    `+os.Args[0]+` vulnerabilities list --limit 146
`, os.Args[0])
}

func vulnerabilitiesSubmitUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] vulnerabilities submit -body JSON

Submit implements submit.
    -body JSON: 

Example:
    `+os.Args[0]+` vulnerabilities submit --body '{
      "cvss_score": 0.7719438,
      "description": "Veniam iste velit illo maxime impedit pariatur.",
      "exploitable": true,
      "is_patchable": true,
      "is_upgradeable": true,
      "title": "Voluptatum ut eveniet."
   }'
`, os.Args[0])
}
