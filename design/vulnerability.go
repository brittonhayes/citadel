package design

import (
	. "goa.design/goa/v3/dsl"
)

var _ = Service("vulnerabilities", func() {
	Description("The vulnerability service handles the creation and querying of security vulnerabilities.")
	HTTP(func() {
		Path("/vulnerabilities")
	})
	Method("find", func() {
		Payload(func() {
			Field(1, "id", UInt64, "Unique ID of the vulnerability")
			Required("id")
		})
		Result(Vulnerability)
		Error("no_match", String, "No vulnerability matched given criteria")
		HTTP(func() {
			GET("/{id}")
			Response(StatusOK)
			Response("no_match", StatusNotFound)
		})
	})

	Method("list", func() {
		Description("List all of the vulnerabilities")
		Payload(LimitPayload)
		Result(ArrayOf(Vulnerability))
		HTTP(func() {
			GET("/")
			Response(StatusOK)
			Param("limit", Int, "Limit the number of results")
		})
	})

	Method("submit", func() {
		Payload(func() {
			Attribute("title", String, "Title of the vulnerability")
			Attribute("description", String, "Description of the vulnerability")
			Attribute("exploitable", Boolean, "If the vulnerability is exploitable")
			Attribute("cvss_score", Float32, "Severity score of the vulnerability")
			Attribute("is_patchable", Boolean, "If the vulnerability is patchable")
			Attribute("is_upgradeable", Boolean, "If the vulnerability is upgradeable")
		})
		Error("no_match", String, "No vulnerability matched given criteria")
		HTTP(func() {
			POST("/")
			Response(StatusCreated)
			Response("no_match", StatusNotFound)
		})
	})
})

var Vulnerability = Type("Vulnerability", func() {
	Attribute("id", UInt64, "Unique ID of the vulnerability", func() {
		Minimum(0)
	})
	Attribute("title", String, "Title of the vulnerability", func() {
		Example("CVE-2020-10")
	})
	Attribute("description", String, "Description of the vulnerability", func() {
		Example("There is a possible out of bounds write due to a use after free. This could lead to remote code execution with no additional execution privileges needed.")
	})
	Attribute("exploitable", Boolean, "If the vulnerability is exploitable")
	Attribute("cvss_score", Float32, "Severity score of the vulnerability", func() {
		Example(4.7)
	})
	Attribute("is_patchable", Boolean, "If the vulnerability is patchable")
	Attribute("is_upgradeable", Boolean, "If the vulnerability is upgradeable")
	Required("id")
})
